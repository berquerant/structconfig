// Code generated by "goconfig -configOption Option -option -output structconfig_config_generated.go -field AnyCallback AnyCallbackFunc|AnyEqual AnyEqualFunc|Prefix string"; DO NOT EDIT.

package structconfig

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	AnyCallback *ConfigItem[AnyCallbackFunc]
	AnyEqual    *ConfigItem[AnyEqualFunc]
	Prefix      *ConfigItem[string]
}
type ConfigBuilder struct {
	anyCallback AnyCallbackFunc
	anyEqual    AnyEqualFunc
	prefix      string
}

func (s *ConfigBuilder) AnyCallback(v AnyCallbackFunc) *ConfigBuilder {
	s.anyCallback = v
	return s
}
func (s *ConfigBuilder) AnyEqual(v AnyEqualFunc) *ConfigBuilder {
	s.anyEqual = v
	return s
}
func (s *ConfigBuilder) Prefix(v string) *ConfigBuilder {
	s.prefix = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		AnyCallback: NewConfigItem(s.anyCallback),
		AnyEqual:    NewConfigItem(s.anyEqual),
		Prefix:      NewConfigItem(s.prefix),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...Option) {
	for _, x := range opt {
		x(s)
	}
}

type Option func(*Config)

func WithAnyCallback(v AnyCallbackFunc) Option {
	return func(c *Config) {
		c.AnyCallback.Set(v)
	}
}
func WithAnyEqual(v AnyEqualFunc) Option {
	return func(c *Config) {
		c.AnyEqual.Set(v)
	}
}
func WithPrefix(v string) Option {
	return func(c *Config) {
		c.Prefix.Set(v)
	}
}
